// 익명 함수
// 함수 표현식(function expression)은 사실 대부분의 언어에서 언급되는 익명 함수(anonymous function)의
// 다른 표현이다. 자바스크립트에서는 가끔 다음과 같은 형태로 작성된 코드를 만날수 있다. 앞에서 살펴본
// 함수 표현식 개념이 없는 상태에서 단순히 익명 함수를 '이름이 없는 함수'로만 이해하면, 이런 형태의
// 코드가 어떻게 동작하는지 그 원리를 쉽게 가늠하기 어려울 것이다.
let value = (function(a, b) { return a + b })(1, 2) // 3

// 위의 코드를 이해하려면 먼저 연산자 우선순위(operator precedence)를 고려해 코드를 분해해야 한다.
// 일반적으로 연산자들이 우선순위가 다르면 (1 + 2) * 5처럼 소괄호를 사용해 우선순위를 변경한다.
// 마찬가지로 함수 호출 연산자는 연산자의 우선순위가 매우 높으므로 함수 표현식 부분을 소괄호로 묶어서
// 컴파일러가 정상적으로 함수 표현식의 시작과 끝 부분을 알 수 있게 해야 한다.

// 다음 코드는 위의 한 줄짜리 코드를 쉽게 분석하고자 세 줄로 나눠 보았다.
let value =
(function(a, b) { return a + b })
(1, 2) // 3

// const 키워드와 함수 표현식
// 함수 표현식을 담는 변수는 let보다는 const 키워드로 선언하는 것이 바람직하다. let 키워드는 변수값이
// 변할 수 있으므로 다음 처럼 코드를 작성하면 함수 f는 언젠가 다른 내용으로 바뀔 수 있게 된다.
let f = () => {}

// 반면 함수 표현식을 담는 변수를 const 키워드로 선언하면, 함수 내용이 이후에 절대로 바뀔 수 없다.
// 따라서 앞으로는 함수 표현식을 담는 변수는 const로 선언하겠다.
const f = () => {}
