// 5.4.1 관계 연산자

// 동일 연산자 (==, 값을 평가)
var a = [1, 2, 3];
var b = [1, 2, 3];
var c = a;
console.log(a == b); // false (다른 배열 객체이다.)
console.log(a == c); // true  (같은 배열 객체이다.)

/* 평가 값이 true */
null == undefined
1 == '1'
'0xff' == 255
true == 1
true == '1'
(new String('a')) == 'a'
(new NUmber(2)) == 2
[2] == 2

// 일치 연산자 (===, 값과 타입을 평가)
Nan === Nan // false

/* 동일 연산자의 사용 예에서의 true였던 표현식이 일치 연산자에서는 모두 false로
   평가된다. */


// 5.4.2 논리 연산자

/* [false로 평가되는 값]
0, -0, ''(빈 문자열), NaN, null, undefinded */

/* [true로 평가되는 값]
0을 제외한 숫자, 빈 문자열을 제외한 문자열, 모든 객체, 심벌 */

/* && 연산자는 객체의 프로퍼티를 이용할 때와 객체가 null 인지 아닌지를 확인 하고자
   할 때 유용하게 사용된다. */
var p = null;
p && p.name // null (p가 false로 평가되므로 p의 값을 반환, 우변은 평가하지 않음)
p = { name: 'Tom', age: 18 };
p && p.name // Tom (p가 true로 평가되므로 p.name을 반환)

/* || 연산자는 함수에서 인수의 초기값을 설정할 때 유용하게 사용할 수 있다. */
function f(x) {
  x = x || 100; // x의 기본값을 100으로 선언
  // ...
}
/* 함수 f를 인수 없이 f()라고 호출하면 인수 x에는 undefined가 전달된다.
   undefined는 false로 평가되므로 다음과 같이 평가된다. */
x = x || 100; // 100
/* 인수를 지정해서 f(2)라고 호출하면 인수 x에는 2가 전달된다. 2는 true로 평가되므로
   다음과 같이 같다. */
x = x || 100; // 2

/* ES6 부터는 함수의 매개변수의 기본값 설정이 가능하므로 || 연산자를 통한 기본값 지정
   은 의미가 없어졌다. */
