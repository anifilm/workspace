// 인터페이스 기본 1
package main

import "fmt"

type test interface{} // 빈 인터페이스

func main() {
    // 인터페이스
    // 객체의 동작을 표현 (골격)
    // 단순히 동작에 대한 방법만 표시
    // 추상화 제공
    // 인터페이스의 메서드를 구현한 타입은 인터페이스로 사용 가능
    // Go 언어를 유연하게 사용 가능
    // 덕타이핑: Go 언어의 독창적인 특성

    // 인터페이스 -> 자바 (전략패턴, 템플릿메서드, 팩토리메서드패턴, 어댑터패턴, ...)
    // 디자인 패턴 측면에서 Client 입장 -> 메서드의 구체적인 클래스를 몰라도 인터페이스 정의된 메서드를 사용하는 객체 보장
    // 클래스 간의 결합도 감소 -> 유지보수성 향상, 기능 추가의 용이성 -> 독집적인 프로그래밍 가능

    /*
       type 인터페이스명 interface {
         메서드1() 반환값 (타입형)
         메서드2() // 반환값이 없는 경우
       }
    */

    // 예제
    var t test
    fmt.Println("ex:", t) // Empty 인터페이스인 경우 nil 반환
}
