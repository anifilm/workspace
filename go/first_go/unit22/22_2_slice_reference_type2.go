// 레퍼런스 타입 2
package main

import "fmt"

func main() {
    a := []int{1, 2, 3} // 슬라이스 선언 및 초기화 (길이 3)
    var b []int         // 슬라이스 변수 선언

    b = a    // a를 b에 대입하면 요소를 복사하지 않고 참조하게 된다. shallow copy
    b[0] = 9 // 슬라이스는 참조이므로 a[0], b[0]의 값이 모두 수정된다.

    fmt.Println(a) // [9 2 3]
    fmt.Println(b) // [9 2 3]

    // fmt.Println(a == b)  // 슬라이스는 비교연산을 할 수 없다.

    // 슬라이스 변수의 첫 번째 요소의 주소값 출력
    fmt.Printf("%p\n", &a[0])
    fmt.Printf("%p\n", &b[0]) // 같다.
}

/*
슬라이스는 레퍼런스 타입이다. 내장된 배열에 대한 포인터이므로 슬라이스간에 대입이 일어나면 값을 복사하지 않고 참조(레퍼런스)하게 된다.

마찬가지로 함수의 매개변수에 배열을 넘기면 복사가 되지만 슬라이스를 넘기면 참조만 하게된다. 따라서 함수 안에서 슬라이스의 요소를 변경
하면 원본값도 수정이 된다.

a := []int{1, 2, 3}

    [배열포인터][len 3][cap 3] 슬라이스 a
      ↘
       {1, 2, 3} 내부 배열

var b []int

    [배열포인터][len 0][cap 0] 슬라이스 b
      ↘
       nil

b = a  // 슬라이스 객체 참조 (레퍼런스)

    [배열포인터][len 3][cap 3] 슬라이스 a
      ↘
       {1, 2, 3} 내부 배열
      ↗
    [배열포인터][len 3][cap 3] 슬라이스 b

*/
