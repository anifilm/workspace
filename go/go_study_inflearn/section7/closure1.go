// 함수 Closure 1
package main

import "fmt"

func main() {
    // 클로저 (Closure)
    // 익명함수를 사용할 경우 함수를 변수에 할당해서 사용 가능
    // 이때 함수는 일급 객체 이므로 변수의 값으로 사용 가능
    // 현재 범위에 있는 변수의 값을 캡처 후 호출 할때 변수 사용 가능 (선언 시점 기준)

    // 함수 안에서 함수를 선언 및 정의 가능 -> 외부 함수에 선언된 변수에 접근 가능한 함수
    // 함수가 선언되는 순간에 함수가 실행 될때 실체의 외부 변수에 접근하기 위한 스냅샷 (객체)
    // 함수를 호출 할 때 이전에 존재했던 값을 유지하기 위해 일반적으로 사용하게 된다
    // 비동기, 누적카운트 -> 무분별한 전역변수 남발 -> 객체 들이 메모리에 존재하게 되어
    // -> 메모리 부족, 오버플로우 현상, 자원을 무분별하게 사용할 가능성
    // 클로저 정확하게 이해하고 사용할 필요

    // 예제 1
    multiply := func(x, y int) int { // 익명함수 변수 할당
        return x * y
    }

    r1 := multiply(5, 10)

    fmt.Println("ex1:", r1)

    // 예제 2
    m, n := 10, 5            // 변수를 캡처
    sum := func(c int) int { // 익명함수 변수 할당
        return m + n + c // 지역 변수 소멸되지 않는다 (함수 호출시 마다 사용 가능)
    }

    r2 := sum(10)

    fmt.Println("ex2:", r2)
}
