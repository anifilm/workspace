/* C언어의 복습을 유도하는 확인학습 문제

[문제 1] 키워드 const의 의미
키워드 const는 어떠한 의미를 갖는가? 다음 문장들을 대상으로 이를 설명해보자.

const int num = 10;
변수 num을 상수화
num에 10을 대입하고 상수로 지정하여 선언 이후 값을 변경하지 못한다.

const int* ptr1 = &val1;
상수를 가리키는 포인터 (Pointer to const value)
ptr1에 val1의 주소값을 대입하고 주소값이 가리키는 값을 상수로 지정하여 값을 변경하지 못한다.
(ptr1을 이용하여 값을 변경하지 않겠다)

int* const ptr2 = &val2;
상수 포인터 (Const pointer)
ptr2에 val2의 주소값을 대입하고 상수로 지정하여 저장된 주소값을 변경하지 못한다.
(ptr2가 가리키는 대상을 변경하지 않겠다)

const int* const ptr3 = &val3;
상수를 가리키는 상수 포인터 (Const pointer to a const value)
ptr3에 val3의 주소값을 대입하고 이후 주소값과 주소값이 가리키는 값을 상수화하여 변경하지 못한다.


[문제 2] 실행중인 프로그램의 메모리 공간
실행중인 프로그램은 운영체제로부터 메모리 공간을 할당 받는데, 이는 크게 데이터, 스택, 힙 영역으로
나뉜다. 각각의 영역에는 어떠한 형태의 변수가 할당되는지 설명해보자. 특히 C언어의 malloc과 free
함수와 관련해서도 설명해보자.

# date (데이터) 영역
global (전역변수), static (정적변수), array (배열), 구조체 (structure) 등이 저장된다.
프로그램이 실행 될 때 생성되고 프로그램이 종료되면 시스템에 반환 된다.
함수 내부에 선언된 static 변수는 프로그램이 실행될 때 공간만 할당되고 그 함수가 실행될 때 초기화 된다.

# stack (스택) 영역
프로그램이 자동으로 사용하는 임시 메모리 영역이다.
local (지역변수), parameter (매개변수), 리턴값 등 잠시 사용되었다가 사라지는 데이터를 저장하는 영역이다.
함수 호출시 생성되고 함수가 끝나면 시스템에 반환 된다.
스택 사이즈는 각 프로세스 마다 할당 되지만 프로세스가 메모리에 로드될 때 스택 사이즈가 고정되어 있어,
런타임 시에 스택 사이즈를 변경할 수 없다.
명령 실행시 자동 증가/감소 하기 때문에 보통 메모리의 마지막 번지를 지정 한다.

# heap (힙) 영역
필요에 의해 동적으로 메모리를 할당하고자 할 때 위치하는 메모리 영역으로 동적 데이터 영역이라고 부르며,
메모리 주소값에 의해서만 참조되고 사용되는 영역이다.
이 영역에 데이터를 저장하기 위해서는 C언어에서는 malloc()/free(), C++에서는 new()/delete() 함수를 사용 한다.


[문제 3] Call-by-value vs. Call-by-reference
함수의 호출형태는 크게 '값에 의한 호출 (Call-by-value)'과 '참조에 의한 호출 (Call-by-reference)'로 나뉜다.
이 둘을 나누는 기준이 무엇인지, 두 int형 변수의 값을 교환하는 Swap 함수를 예로 들어가면서 설명해보자.

# 값에 의한 호출 (Call-by-value)
함수에 값을 복사하여 전달한다. 함수 내에서 변경된 값은 함수 종료시 사라지며 반환값으로 전달되지 않는다면 원본값
에는 영향을 미치지 않는다.

void Swap(int num1, int num2) {
    int temp = num1;
    num1 = num2;
    num2 = temp;
}

# 참조에 의한 호출 (Call-by-reference)
함수에 주소값을 포인터로 전달한다. 함수 내에서 값 변경시 해당 값에 의해 원본값 역시 변견된다. 두개 이상의 반환값이
필요한 경우 주로 사용된다.

void Swap(int* ptr1, int* ptr2) {
    int temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}
*/
